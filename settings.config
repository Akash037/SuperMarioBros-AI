
[NeuralNetwork]
inputs_size = (2, 1, 0, 5)  # How many tiles to use as input in the (up, down, left, right) directions from Mario
input_dims = (4, 7, 10)  # (start_row, width, height) where width and height are in number of tiles
hidden_layer_architecture = (10, 8)
hidden_node_activation = relu
output_node_activation = sigmoid

[Graphics]
tile_size = (16, 16)  # Tile size in pixels in the (X, Y) direction
neuron_radius = 8

[Statistics]
save_best_individual_from_generation = /home/chris/dev/SuperMarioBros-AI/100_plus_200_sbx100_roulette_inf_life_fake
save_population_stats = /home/chris/dev/SuperMarioBros-AI/100_plus_200_sbx_100_roulette_inf_life_fake.csv

### Genetic Algorithm ###
[GeneticAlgorithm]
fitness_func = lambda frames, distance, game_score, did_win: \
# frames:     Number of frames that Mario has been alive for
# distance:   Total horizontal distance gone through the level
# game_score: Actual score Mario has received in the level through power-ups, coins, etc.
# did_win:    True/False if Mario beat the level
    max(distance ** 1.9 - \ 
    frames ** 1.5 +   \
    min(max(distance-50, 0), 1) * 2000 + \
    game_score**2 + \
    did_win * 1e6, 0.00001)

[Mutation]
mutation_rate = 0.05  # Value must be between [0.00, 1.00)
mutation_rate_type = static
gaussian_mutation_scale = 0.2  # The amount to multiple by the guassian(0, 1) value by

[Crossover]
probability_sbx = 1.0
sbx_eta = 100
crossover_selection = roulette
tournament_size = 5

[Selection]
num_parents = 3
num_offspring = 7
selection_type = plus
lifespan = 5


